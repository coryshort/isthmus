#!/bin/bash
# Original code by Dave Coyle (http://coyled.com)
# Tweaks by Gwyneth Llewelyn (http://gwynethllewelyn.net/)
# Additional code by Lotek Ixtar

# Requires bash 4

# Get the root folder of the isthmus tree
export OPENSIM_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
REGIONS_DIR="${OPENSIM_DIR}/etc/regions"
OAR_PATH="${OPENSIM_DIR}/var/backup"
OAR_OPTIONS=
LOGFILE="${OPENSIM_DIR}/var/log/isthmus.log"

# Install isthmus config file if not already there, and then source it
if [ ! -f "${OPENSIM_DIR}/etc/isthmus.conf" ]; then
    cp "${OPENSIM_DIR}/share/common/etc/isthmus.conf" "${OPENSIM_DIR}/etc"
fi
source "${OPENSIM_DIR}/etc/isthmus.conf"

# Mono optimizations
export MONO_GC_PARAMS="nursery-size=32m,minor=split,promotion-age=14"

SCREEN="/usr/bin/screen"
GREP="/bin/grep"

show_help() {
    echo "`basename $0` - Control opensim simulators\n\n"
    echo "start <simname>     Start a simulator"
    echo "stop <simname>      Stop and deregister from the map"
    echo "kill <simname>      Stop by sending SIGHUP (unclean)"
    echo "alert <simname> \"This is an alert message\"    Send an inworld alert msg"
    echo "restart <simname>   Issues a stop, then start command"
    echo "status <simname>    Returns online status"
    echo "backup <simname>    Ensure database is saved"
    echo "saveoar <simname>    Saves regions in sim to an .oar bundle"
    echo "list                List available sims"
}

do_log() {
    logline="`date` - $1"
    echo $logline >> $LOGFILE
}

check_user() {
    if [ `whoami` == 'root' ]; then
        echo "Refusing to run as root"
        exit 1
    fi
}

is_sim() {
    if [ -r "${REGIONS_DIR}/$1.ini" ]; then
        return 0
    elif [ -d "${REGIONS_DIR}/$1" ]; then
        return 0
    else
        return 1
    fi
}

is_running() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    SCREENRET=`${SCREEN} -ls ${SIM}`
    if [[ ${SCREENRET} == "No Sockets"* ]]; then
        return 1
    else
        return 0
    fi
}

get_status() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    if is_sim ${SIM}; then
        if is_running ${SIM}; then
            echo "[${SIM}] is online"
            exit 1
        else
            echo "[${SIM}] is offline"
            exit 0 
        fi
    else
        echo "[${SIM}] does not exist"
        exit -1
    fi
}

findfreeport() {
    mkdir -p "${OPENSIM_DIR}/var/ports"
    for (( port=${TCP_RANGE_START}; port<=${TCP_RANGE_END}; port++ ))
    do
        grep -q ${port} ${OPENSIM_DIR}/var/ports/*
        if [ $? -ne 0 ]; then
            echo ${port}
            return
        fi
    done
    echo ${TCP_RANGE_START}
}

setup() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    if is_sim ${SIM}; then
        # SIM_LOG_FILE is used by log4net (OpenSim.exe.config) for sim logs
        mkdir -p "${OPENSIM_DIR}/var/log"
        export SIM_LOG_FILE="${OPENSIM_DIR}/var/log/${SIM}.log"
        mkdir -p "${OPENSIM_DIR}/var/pid"
        PID="${OPENSIM_DIR}/var/pid/${SIM}.pid"
    else
        echo "Sorry, I've never heard of sim ${SIM}.  Exiting."
        exit 1;
    fi

    if [ -f "${OPENSIM_DIR}/var/ports/${SIM}.port" ]; then
        PORT_SIM=`cat ${OPENSIM_DIR}/var/ports/${SIM}.port`
    else
        PORT_SIM=$(findfreeport)
    fi
}

do_start() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    if is_running ${SIM}; then
        echo "[${SIM}] Already started"
        exit 1
    fi

    setup ${SIM}
    check_user

    # Rotate log file if existing already
    if [ -r "${OPENSIM_DIR}/var/log/${SIM}.log" ]; then
        mv -f "${OPENSIM_DIR}/var/log/${SIM}.log" "${OPENSIM_DIR}/var/log/${SIM}.old.log"
    fi

    # Second Life time is the US/Pacific-New timezone
    export TZ="US/Pacific-New"
    export LANG=C
    ulimit -n 4096
    if [ -f "${REGIONS_DIR}/${SIM}.ini" ]; then
        cd "${OPENSIM_DIR}/runtime/bin" && ${SCREEN} -S ${SIM} -d -m -l \
            ${MONO} --desktop OpenSim.exe \
            -inifile="${OPENSIM_DIR}/etc/opensim.ini" \
            -http_listener_port=${PORT_SIM} \
            -PIDFile="${PID}" \
            -regionload_regionfile="${REGIONS_DIR}/${SIM}.ini"
    elif [ -d "${REGIONS_DIR}/${SIM}" ]; then
        cd "${OPENSIM_DIR}/runtime/bin" && ${SCREEN} -S ${SIM} -d -m -l \
            ${MONO} --desktop OpenSim.exe \
            -inifile="${OPENSIM_DIR}/etc/opensim.ini" \
            -http_listener_port=${PORT_SIM} \
            -PIDFile="${PID}" \
            -regionload_regionsdir="${REGIONS_DIR}/${SIM}"
    fi

    sleep 3
    if ! is_running ${SIM}; then
        echo "[${SIM}] Failed to start"
        do_log "[${SIM}] Has problems with starting"
        exit 1
    else
        echo "${PORT_SIM}" > "${OPENSIM_DIR}/var/ports/${SIM}.port"
        echo "[${SIM}] Started"
    fi
}

do_kill() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if is_running ${SIM}; then
        # Send backup command and wait 1 minute
        ${SCREEN} -r ${SIM} -X exec .\!\! echo "\nbackup"
        sleep 60
        if [ -f ${PID} ]; then
            kill -9 `cat ${PID}`
            rm ${PID}
            if [ -f "${OPENSIM_DIR}/var/ports/${SIM}.port" ]; then
                rm "${OPENSIM_DIR}/var/ports/${SIM}.port"
            fi
	    echo "[${SIM}] Killed"
        fi
    fi
}

do_stop() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if is_running ${SIM}; then
        echo -n "[${SIM}] Stopping"
        kill -SIGTERM `cat ${PID}`
        STOPTIME=0
        while :
        do
            sleep 5
            STOPTIME=$((STOPTIME + 5))
            echo -n "."
            if ! is_running ${SIM}; then
                if [ -f "${OPENSIM_DIR}/var/ports/${SIM}.port" ]; then
                    rm "${OPENSIM_DIR}/var/ports/${SIM}.port"
                fi
                echo " stopped"
                return 0
            elif [ ${STOPTIME} -ge 120 ]; then
                echo " killing"
                do_kill ${SIM}
                do_log "[${SIM}] Took a long time to shutdown"
                return 1
            fi
        done
    else
        echo "[${SIM}] Not running"
        exit 1
    fi 
}

do_alert() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if is_running ${SIM}; then
        ${SCREEN} -r ${SIM} -X exec .\!\! echo "\nalert $2"
    else
        echo "${SIM} not running"
    fi
}

do_backup() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if is_running ${SIM}; then
        ${SCREEN} -r ${SIM} -X exec .\!\! echo "backup"
    else
        echo "${SIM} not running"
    fi
}

do_audit() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    if is_sim ${SIM}; then
        if [ -f "${OPENSIM_DIR}/var/ports/${SIM}.port" ]; then
           tcp_port=`cat ${OPENSIM_DIR}/var/ports/${SIM}.port`
           echo -e "TCP\t${tcp_port}\t${SIM}"

        else
           echo -e "TCP\t -- \t${SIM}"
        fi
        if [ -d "${REGIONS_DIR}/${SIM}" ]; then
            for INIFILE in ${REGIONS_DIR}/${SIM}/*.ini ; do
                SECTION=`head -n 1 ${INIFILE}`
                REGION="${SECTION:1: -1}"
                REGIONPORT=`${GREP} InternalPort ${INIFILE} | ${GREP} -ho '[0-9]*'`
                echo -e "UDP\t${REGIONPORT}\t${SIM} - ${REGION}"
            done
         else
            INIFILE=${REGIONS_DIR}/${SIM}.ini
            SECTION=`head -n 1 ${INIFILE}`
            REGION="${SECTION:1: -1}"
            REGIONPORT=`${GREP} InternalPort ${INIFILE} | ${GREP} -ho '[0-9]*'`
            echo -e "UDP\t${REGIONPORT}\t${SIM} - ${REGION}"
         fi

    fi
}


# do_saveoar simname (oarpath)
# Saves oars for all regions in simulator
# If no oarpath specified, use default var/backup/yyyy-mm-dd
do_saveoar() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if [ ! $3 ]; then
        LOCAL_OAR_PATH="${OAR_PATH}/`date -I'date'`"
    else
        LOCAL_OAR_PATH=$3 
    fi

    mkdir -p "${LOCAL_OAR_PATH}"

    if is_running ${SIM}; then
        # Alert inworld about temporary degraded performance"
        ${SCREEN} -r ${SIM} -X exec .\!\! echo "\nalert \"SYSTEM NOTICE: Region backup in progress. Performance might be a bit slower for a few minutes..\""
        sleep 3

        if [ -d "${REGIONS_DIR}/${SIM}" ]; then
            # Multi region sim, requires special handling
            for INIFILE in ${REGIONS_DIR}/${SIM}/*.ini ; do
                SECTION=`head -n 1 ${INIFILE}`
                REGION="${SECTION:1: -1}"

                # Change region first
                ${SCREEN} -r ${SIM} -X exec .\!\! echo "change region \"${REGION}\""
                sleep 3

                # Backup the region
                OAR_FILE="${LOCAL_OAR_PATH}/${REGION}-`date -I'date'`.oar"
                ${SCREEN} -r ${SIM} -X exec .\!\! echo "save oar ${OAR_OPTIONS} \"${OAR_FILE}\""

                # Pause a bit. TODO: check whether oar file is not open
                # anymore and only then continue (lsof)
                sleep 120
            done
        else
            # Sim has just 1 region
            OAR_FILE="${LOCAL_OAR_PATH}/${SIM}-`date -I'date'`.oar"
            ${SCREEN} -r ${SIM} -X exec .\!\! echo "\nsave oar ${OAR_OPTIONS} \"${OAR_FILE}\""
            sleep 120
        fi
    fi
}

do_list() {
    for simulator in ${OPENSIM_DIR}/etc/regions/*; do
        simname=`basename ${simulator} .ini`
        echo "${simname}"
    done;
}

case "$1" in
    start)
        do_start $2
        ;; 
    stop)
        do_stop $2
        ;;
    kill)
        do_kill $2
        ;;
    alert)
        do_alert $2 "$3"
        ;;
    restart)
        do_stop $2
        # Take time for the pid file to clear
        sleep 1
        do_start $2
        ;;
    status)
        get_status $2
        ;;
    audit)
        do_audit $2
        ;;
    saveoar)
        do_saveoar $2
        ;;
    backup)
        do_backup $2
        ;;
    list)
        do_list
        ;;
    *)
        show_help
        exit 1
        ;;
esac


#!/bin/bash
# Original code by Dave Coyle (http://coyled.com)
# Tweaks by Gwyneth Llewelyn (http://gwynethllewelyn.net/)
# Additional code by Lotek Ixtar

# Requires bash 4

# Get the root folder of the isthmus tree
export OPENSIM_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
ROBUST_DIR="${OPENSIM_DIR}/etc/robust"
LOGFILE="${OPENSIM_DIR}/var/log/isthmus.log"
mkdir -p "${OPENSIM_DIR}/var/log"
mkdir -p "${OPENSIM_DIR}/var/fsassets"
mkdir -p "${OPENSIM_DIR}/var/pid/robust"

# Install isthmus config file if not already there, and then source it
if [ ! -f "${OPENSIM_DIR}/etc/isthmus.conf" ]; then
    cp "${OPENSIM_DIR}/share/common/etc/isthmus.conf" "${OPENSIM_DIR}/etc"
fi
source "${OPENSIM_DIR}/etc/isthmus.conf"

export ROBUST_HOSTNAME=`hostname`

# Mono optimizations
export MONO_GC_PARAMS="nursery-size=32m,minor=split,promotion-age=14"

show_help() {
    echo -e "`basename $0` - Control grid services\n"
    echo "start               Start robust"
    echo "stop                Stop robust"
    echo "kill                Stop by sending SIGHUP (unclean)"
    echo "restart             Issues a stop, then start command"
    echo "status              Returns status"
}

do_log() {
    logline="`date` - $1"
    echo $logline >> $LOGFILE
}

check_user() {
    if [ `whoami` == 'root' ]; then
        echo "Refusing to run as root"
        exit 1
    fi
}

is_running() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        INSTANCE=$1
    fi

    SCREENPID=`${SCREEN} -ls ROBUST-${INSTANCE} | grep -P "ROBUST-${INSTANCE}\t" | cut -f1 -d'.' | sed 's/W//g'`
    if [ "${SCREENPID}" != "" ]; then
        return 0
    else
        return 1
    fi
}

get_status() {
    if is_running ${INSTANCE}; then
        echo "[${INSTANCE}] is online"
        exit 1
    else
        echo "[${INSTANCE}] is offline"
        exit 0 
    fi
}

setup() {
    INSTANCE=$1

    mkdir -p "${OPENSIM_DIR}/var/log"
    export ROBUST_LOGFILE="${OPENSIM_DIR}/var/log/robust.${INSTANCE}.log"

    mkdir -p "${OPENSIM_DIR}/var/pid/robust"
    export ROBUST_PIDFILE="${OPENSIM_DIR}/var/pid/robust/${INSTANCE}.pid"
}

do_start() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        INSTANCE=$1
    fi

    if [ ! -r "${ROBUST_DIR}/${INSTANCE}.ini" ]; then
        echo "[${INSTANCE}] Not enabled or does not exist"
        exit 1
    fi

    if is_running ${INSTANCE}; then
        echo "[${INSTANCE}] Already started"
        exit 1
    fi

    setup ${INSTANCE}

    # Rotate log file if existing already
    if [ -r "${ROBUST_LOGFILE}" ]; then
        mv -f "${ROBUST_LOGFILE}" "${ROBUST_LOGFILE}.old"
    fi

    # Second Life time is the US/Pacific-New timezone
    export TZ="US/Pacific-New"
    export LANG=C
    ulimit -n 4096
    cd "${OPENSIM_DIR}/runtime/bin" && ${SCREEN} -S ROBUST-${INSTANCE} -d -m -l \
        ${MONO} --desktop Robust.exe \
        -inifile="${ROBUST_DIR}/${INSTANCE}.ini"

    echo -n "[${INSTANCE}] Starting"
    STARTTIME=0
    while :
    do
        sleep 5
        STARTTIME=$((STARTTIME + 5))
        echo -n "."
        if is_running ${INSTANCE}; then
            echo " started"
            exit 0
        elif [ ${STARTTIME} -ge 30 ]; then
            echo " failed!"
            do_log "[${INSTANCE}] Robust instance has problems with starting"
            exit 1
        fi
    done
}

do_kill() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        setup $1
    fi

    if is_running ${INSTANCE}; then
        PID="${OPENSIM_DIR}/var/Robust.exe.pid"
        if [ -f ${ROBUST_PIDFILE} ]; then
            kill -9 `cat ${ROBUST_PIDFILE}`
            rm ${ROBUST_PIDFILE}
            echo "[${INSTANCE}] Killed"
        fi
    fi
}

do_stop() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        setup $1
    fi

    if is_running ${INSTANCE}; then
        echo -n "[${INSTANCE}] Stopping"
        ${SCREEN} -r ${SCREENPID}.ROBUST-${INSTANCE} -X exec .\!\! echo "\nquit"
        STOPTIME=0
        while :
        do
            sleep 5
            STOPTIME=$((STOPTIME + 5))
            echo -n "."
            if ! is_running ${INSTANCE}; then
                echo " stopped"
                return 0
            elif [ $(STOPTIME) -ge 120 ]; then
                echo " killing"
                do_kill ${INSTANCE}
                do_log "[${INSTANCE}] Robust instance took a long time to shutdown"
                return 1
            fi
        done
    else
        echo "[${INSTANCE}] Not running"
        exit 1
    fi
}

check_user
case "$1" in
    start)
        do_start $2
        ;; 
    stop)
        do_stop $2
        ;;
    kill)
        do_kill $2
        ;;
    restart)
        do_stop $2
        # Take time for the pid file to clear
        sleep 1
        do_start $2
        ;;
    status)
        get_status $2
        ;;
    *)
        show_help
        exit 1
        ;;
esac

